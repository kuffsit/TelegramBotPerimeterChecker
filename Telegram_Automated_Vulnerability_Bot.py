import os
import requests
import subprocess
import json
import time
import tempfile
import logging

# Setting up logging
logging.basicConfig(filename='scan_log.log', level=logging.DEBUG, 
                    format='%(asctime)s %(levelname)s:%(message)s')

# Your tokens and Chat ID (Removed for security reasons)
telegram_token = 'your_telegram_token'
securitytrails_token = 'your_securitytrails_token'
chat_id = 'your_chat_id'  # Your group chat ID

# Domains to check (Replaced with example domains)
domains = ['example1.com', 'example2.com', 'example3.com', 'example4.com', 'example5.com']

# Function to send messages to Telegram
def send_telegram_message(message):
    url = f'https://api.telegram.org/bot{telegram_token}/sendMessage'
    payload = {
        'chat_id': chat_id,
        'text': message,
        'parse_mode': 'HTML'
    }
    try:
        response = requests.post(url, data=payload)
        response_data = response.json()
        if response_data.get("ok"):
            logging.info("Message successfully sent to Telegram.")
        else:
            logging.error(f'Error sending message to Telegram: {response_data}')
    except Exception as e:
        logging.error(f'Error sending message to Telegram: {e}')

# Function to send files to Telegram
def send_file_to_telegram(file_path):
    url = f'https://api.telegram.org/bot{telegram_token}/sendDocument'
    with open(file_path, 'rb') as file:
        files = {'document': file}
        data = {'chat_id': chat_id}
        try:
            response = requests.post(url, files=files, data=data)
            response_data = response.json()
            if response_data.get("ok"):
                logging.info("File successfully sent to Telegram.")
            else:
                logging.error(f'Error sending file to Telegram: {response_data}')
        except Exception as e:
            logging.error(f'Error sending file to Telegram: {e}')

# Function to retrieve subdomains using SecurityTrails API
def get_subdomains(domain):
    url = f'https://api.securitytrails.com/v1/domain/{domain}/subdomains'
    headers = {
        'APIKEY': securitytrails_token
    }
    response = requests.get(url, headers=headers)
    subdomains = []
    if response.status_code == 200:
        data = response.json()
        subdomains = [f"{sub}.{domain}" for sub in data.get('subdomains', [])]
    else:
        logging.warning(f'Failed to retrieve subdomains for {domain}. Response code: {response.status_code}')
    return subdomains

# Function to scan ports using Nmap
def scan_ports(subdomain):
    command = f"nmap -p 22,23,25,53,80,110,143,443,445,993,995,3306,3389,5900,8080,8443 {subdomain} --open --no-styles"
    logging.info(f'Starting Nmap scan for {subdomain}')
    result = subprocess.run(command.split(), capture_output=True, text=True)
    return result.stdout

# Function to scan for vulnerabilities using Nuclei
def scan_vulnerabilities(subdomain):
    command = f"nuclei -u {subdomain} -silent -no-color -severity medium,high,critical"
    logging.info(f'Starting Nuclei scan for {subdomain}')
    result = subprocess.run(command.split(), capture_output=True, text=True)
    return result.stdout

# Main function to generate a security report
def generate_report(domain):
    report = f"Security Report for {domain}\n\n"
    summary = f"Report for domain {domain}\n\nActive subdomains:\n"
    
    subdomains = get_subdomains(domain)
    if not subdomains:
        report += "No active subdomains found.\n"
        summary += "No active subdomains found.\n"
    else:
        for subdomain in subdomains:
            report += f"- {subdomain}\n"
            port_scan_result = scan_ports(subdomain)
            vuln_scan_result = scan_vulnerabilities(subdomain)

            vuln_count = vuln_scan_result.count('\n') if vuln_scan_result else 0
            open_ports = ', '.join([line.split()[0] for line in port_scan_result.splitlines() if '/tcp' in line])

            summary += f"- {subdomain} â€” {vuln_count} vulnerabilities, ports {open_ports} are open\n"

            report += "\nNmap Scan Results:\n"
            report += port_scan_result
            
            if vuln_scan_result:
                report += "\nNuclei Scan Results:\n"
                report += vuln_scan_result
            
            report += "\n" + "-"*30 + "\n"
    
    summary += f"\nReport generated: {time.strftime('%Y-%m-%d %H:%M:%S')}\n"
    
    # Create a temporary file for the report
    with tempfile.NamedTemporaryFile(delete=False, mode='w', suffix='.txt') as temp_file:
        temp_file.write(report)
        temp_file_path = temp_file.name
    
    # Send the summary and report file to Telegram
    send_telegram_message(summary)
    send_file_to_telegram(temp_file_path)
    
    # Remove the temporary file
    os.remove(temp_file_path)

# Execute the check and generate a report for each domain
for domain in domains:
    try:
        generate_report(domain)
    except Exception as e:
        logging.error(f'Error generating report for {domain}: {e}')
